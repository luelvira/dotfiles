#+TITLE: My emacs configuration
#+AUTHOR:  Lucas Elvira Martín
* Table of content :TOC:
  - [[#key-binding-for-dired][Key binding for dired]]
  - [[#configure-dired][Configure DIRED]]
- [[#ui][UI]]
  - [[#fonts][Fonts]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#git-gutter][Git gutter]]
  - [[#rainbown][Rainbown]]
- [[#completion-system][Completion system]]
  - [[#ivy][IVY]]
- [[#writing][Writing]]
  - [[#configure-flyspell][Configure flyspell]]
  - [[#text-mode][Text mode]]
- [[#org-mode][Org mode]]
  - [[#configure-org-agenda][Configure org-agenda]]
  - [[#configure-templates][Configure templates]]
  - [[#org-auto-tangle][Org auto-tangle]]
  - [[#org-export][Org export]]
- [[#org-roam][Org roam]]
  - [[#key-binding][Key binding]]
  - [[#capture-templates][Capture templates]]
  - [[#org-roam-ui][Org roam UI]]
  - [[#zettelkasten-methodology][Zettelkasten methodology]]
  -  [[#3-permanent-notes][3. Permanent notes]]
  -  [[#4-index-notes][4. Index Notes]]

** Key binding for dired

| COMMAND    | Description                    | Key binding |
|------------+--------------------------------+-------------|
| dired      | Open dired                     | SPC d d     |
| dired-Jump | Jumpt to the current directory | SPC d j     |

*** Key binding within dired

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | View file in dired                          | SPC d v    |
| dired-up-directory     | Go up in directory tree                     | h          |
| dired-find-file        | Go down in directory tree (or open if file) | l          |
| dired-next-line        | Move down to next line                      | j          |
| dired-previous-line    | Move up to previous line                    | k          |
| dired-mark             | Mark file at point                          | m          |
| dired-unmark           | Unmark file at point                        | u          |
| dired-do-copy          | Copy current file or marked files           | C          |
| dired-do-rename        | Rename current file or marked files         | R          |
| dired-hide-details     | Toggle detailed listings onoff              | (          |
| dired-git-info-mode    | Toggle git information onoff                | )          |
| dired-create-directory | Create new empty directory                  | +          |
| dired-diff             | Compare file at point with another          | =          |
| dired-subtree-toggle   | Toggle viewing subtree at point             | TAB        |

*** Dired commands using regex


| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

*** File permission and ownership
| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |


*** Define the configuration

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-single-buffer ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt
  (kbd "y") 'dired-ranger-copy
  (kbd "p") 'dired-ranger-paste
  (kbd "d") 'dired-ranger-move)
#+end_src




** Configure DIRED

#+begin_src emacs-lisp
(setq dired-listing-swithces "--group-directories-first"
      delete-by-moving-to-trash t
      dired-open-extensions '(("gif" . "eog")
                              ("jpg" . "eog")
                              ("png" . "eog")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")
                              ("pdf" . "evince")))
#+end_src



* UI

** Fonts
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 15)
      doom-variable-pitch-font (font-spec :family "Noto Sans" :size 15)
      doom-big-font (font-spec :family "Fira Code" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC


* Development

** Projectile

Still empty because I don't know if I will need config it


*** counsel-projectile

*** Key binding for projectile

** Magit
#+begin_src emacs-lisp
;;(after! magit
;;(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Git gutter

Git gutter is a software which make easy to view the difference between a file
and the last commit from the same file

#+begin_src emacs-lisp
#+end_src


** Rainbown
Rainbox mode displays the actual color for any hex value color.  It’s such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src
* Completion system
** IVY

#+begin_src emacs-lisp
(after! ivy
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
)

(use-package! ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

* Writing

** Configure flyspell

#+begin_src emacs-lisp :tangle yes
(defun lem/switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
     (change (if (string= dic "en_US") "es_ES" "en_US")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

  (global-set-key (kbd "<f8>")   'lem/switch-dictionary)

#+end_src

** Text mode


#+begin_src emacs-lisp
  (defun lem/text-mode-setup ()
    "test hook"
    (variable-pitch-mode 1)
    (auto-fill-mode 1)
    ;(visual-line-mode 1)
    (visual-fill-column-mode 1)
    (setq evil-auto-indent nil))

  (add-hook 'tex-mode-hook 'lem/text-mode-setup)
#+end_src

**** Latex

Latex is a markup language bast used to write text without warning about the
format. One very important advantage of this language is that you could define
the style after write  the text and the resulting PDF will be the same,
independent the OS you are using. This not happen when you work with visual
editors.

***** Configure image and math preview

#+begin_src emacs-lisp
  (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-preview-latex-process-alist
	  '((dvipng :programs
		    ("latex" "dvipng")
		    :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
		    (1.0 . 1.0)
		    :latex-compiler
		    ("latex -interaction nonstopmode -output-directory %o %f")
		    :image-converter
		    ("dvipng -D %D -T tight -bg Transparent -o %O %f"))
	    (dvisvgm :programs
		     ("latex" "dvisvgm")
		     :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
		     (1.7 . 1.5)
		     :latex-compiler
		     ("latex -interaction nonstopmode -output-directory %o %f")
		     :image-converter
		     ("dvisvgm %f -e -n -b min -c %S -o %O"))
	    (imagemagick :programs
			 ("latex" "convert")
			 :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
			 (1.0 . 1.0)
			 :latex-compiler
		 ("pdflatex -interaction nonstopmode -output-directory %o %f")
			 :image-converter
			 ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

***** Markdown

#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))
#+end_src
* Org mode


#+begin_src emacs-lisp
  (map! :leader
        :desc "Org babel tangle" "m B" #'org-babel-tangle)
  (defun lem/org-mode-setup ()
    (org-indent-mode))

  (after! org
  (setq
        org-directory "~/Documents/Org"
        org-default-notes-file (expand-file-name "Inbox.org" org-directory)
        org-ellipsis " ▾"
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-log-done 'time
        org-hide-emphasis-markers nil
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-cycle-separator-lines 2
        org-todo-keywords '((sequence
                             "TODO(t)" "NEXT(n)" "WAIT(w)" "|"
                             "DONE(d!)" "CANCELED(c)"))
        org-tag-alist
        '((:startgroup . nil)
          ;; Put mutually exclusive tags here
          ("@home" . ?H )
          ("@PHD" . ?P)
          ("@UI" . ?U)
          (:endgroup . nil))
        org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 1))
        org-outline-path-complete-in-steps nil
        org-refile-use-outline-path    t
        user-full-name "Lucas Elvira Martín"
        user-mail-address "lucaselvira96@gmail.com"))
#+end_src

** Configure org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (mapcar (lambda (file) (concat org-directory file)) '("Tasks.org" "Habits.org")))

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'week)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  ; custom display of task
  (setq org-columns-default-format "%20CATEGORY(Category) %30ITEM(Task) %4TODO %6Effort(Estim){:} %16SCHEDULED %6CLOCKSUM(Clock) %TAGS")

#+end_src

*** Control time per task
#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src

*** Capture templates

#+begin_src emacs-lisp

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tl" "Task with link" entry (file+olp+datetree ,(concat org-directory "Tasks.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("tt" "Task" entry (file+olp+datetree ,(concat org-directory "Tasks.org"))
           "* TODO %?\n  %U\n  %i"
           :tree-type week
           :empty-lines 1)
        ("j" "Journal Entries")
        ("je" "Journal" entry
          (file+olp+datetree ,(concat org-directory "Journal.org"))
          "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
          :tree-type week
          :clock-in :clock-resume
          :empty-lines 1)
        ("jt" "Task Entry" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)
        ("jm" "Meeting" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)
        ("jj" "Journal" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)))

#+end_src

*** Configure font faces

#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.4)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil  :weight 'medium :height (cdr face)))
#+end_src

** Configure templates
#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src python"))
  (add-to-list 'org-structure-template-alist '("ex" . "export"))
#+end_src

** Org auto-tangle
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))
#+end_src

** Org export


*** Export to latex

#+begin_src emacs-lisp :tangle yes
  (after! ox-latex

    ;; update the list of LaTeX classes and associated header (encoding, etc.)
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (setq org-latex-listings t)
  #+end_src


*** Sync Org files

I have a script which try to keep sync with a repository on [[https://codeberg.org/luelvira/Org][codeberg]]. This repo
contains the org files only, and it is named sync

#+begin_src emacs-lisp
    (defun lem/sync (path)
      (shell-command-to-string (format "/home/lucas/.local/bin/sync.sh %s" path)))

    (defun lem/sync-org ()
    "Sync the Org foler with an external script"
    (interactive)
    (lem/sync "~/Documents/Org"))

    (defun lem/sync-conf ()
    "Sync the config foler with an external script"
  (interactive)
  (lem/sync "~/Documents/git/dotfiles"))

    ;; (add-hook 'after-save-hook 'lem/sync) Use as hook generate a lot of commits
#+end_src


* Org roam

#+begin_src emacs-lisp
(after! org
  (setq org-roam-directory (file-truename "~/Documents/Org/roam")
))
#+end_src

** Key binding

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix ("n r" . "org-roam")
       :desc "Completion at point" "c" #'completion-at-point
       :desc "Find node"           "f" #'org-roam-node-find
       :desc "Show graph"          "g" #'org-roam-graph
       :desc "Insert node"         "i" #'org-roam-node-insert
       :desc "Capture to node"     "n" #'org-roam-capture
       :desc "Toggle roam buffer"  "r" #'org-roam-buffer-toggle))

#+end_src

** Capture templates

#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+author: %n\n")
           :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
  :unnarrowed t)
          ))


#+end_src

** Org roam UI

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

*** Org Habits

#+begin_src emacs-lisp
 (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

*** Org pomodoro

#+begin_src emacs-lisp
  (use-package! org-pomodoro
    :after org
    :commands (org-pomodoro)
    :config
    (setq
   alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))
   org-pomodoro-length 120
   org-pomodoro-short-break-length 10))
#+end_src
*** Org roam configuration hacks


#+begin_src emacs-lisp
      (defun my/org-roam-filter-by-tag (tag-name)
        (lambda (node)
          (member tag-name (org-roam-node-tags node))))


      (defun my/org-roam-list-notes-by-tag (tag-name)
          (mapcar #'org-roam-node-file
                  (seq-filter
                   (my/org-roam-filter-by-tag tag-name)
                   (org-roam-node-list))))

      (defun my/org-roam-refresh-agenda-list ()
              (interactive)
              (setq org-agenda-files (delete-dups (append org-agenda-files (my/org-roam-list-notes-by-tag "Project")))))

              ;; Build the agenda list the first time for the session

            (defun my/org-roam-project-finalize-hook ()
                "Adds the captured project file to `org-agenda-files' if the
              capture was not aborted."
                ;; Remove the hook since it was added temporarily
                (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

                ;; Add project file to the agenda list if the capture was confirmed
                (unless org-note-abort
                  (with-current-buffer (org-capture-get :buffer)
                    (add-to-list 'org-agenda-files (buffer-file-name)))))

          (defun my/org-roam-find-project ()
              (interactive)
              ;; Add the project file to the agenda after capture is finished
              (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

            ;; Select a project file to open, creating it if necessary
              (org-roam-node-find
             nil
             nil
             (lambda (node)
              (member "Project" (org-roam-node-tags node)))))

      (defun my/org-roam-capture-inbox ()
        (interactive)
        (org-roam-capture- :node (org-roam-node-create)
                           :templates '(("i" "inbox" plain "* %?"
                                         :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))
    (defun my/org-roam-capture-task ()
      (interactive)
      ;; Capture the new task, creating the project file if necessary
      (org-roam-capture- :node (org-roam-node-read
                                nil
                                (my/org-roam-filter-by-tag "Project"))
                         :templates '(
                                      ("p" "project" plain "** TODO %?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                              ("Tasks")))
                                      ("s" "start now" entry "** TODO %?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                              ("Tasks"))
                                       :clock-in :clock-resume)
                                      )))

    (defun lem/org-roam-capture-meeting ()
      (interactive)
      (org-roam-capture- :node (org-roam-node-read
                               nil
                               (my/org-roam-filter-by-tag "Project"))
                         :templates '(("m" "Meeting" plain "** %<%Y-%m-%d %H:%M>\n%?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                                  "#+title: ${title}\n#+category:${title}\n#+filetags: Project"
                                                                  ("Meetings"))
                                       :clock-in :clock-resume
                                       :empty-lines: 1))))
#+end_src
** Zettelkasten methodology

The zettelkasten methodology  offers a set of rules to help you to organize your notes in a
way that makes them easy to find. It is based on the idea of establishing links
between atomic concepts (each note). On this way, breaks the traditional
hierarchical structure based on folders and makes it easier to relate concepts

There are 4 kind of notes:
***  1. Fleeting notes

Fleeting notes are thinkings, ideas, concepts and sketch of future notes. They
need to be processed and related with another notes. To make it simple, the
name of this  notes has a prefix with the current date and time, so can be many
notes with the same "title". This method make easy not be distracted by the
title instead of the concept.

#+begin_src emacs-lisp
    (add-to-list 'org-roam-capture-templates
                 '("f" "Fleeting" plain "%?"
                  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+AUTHOR: %n\n#+filetags: fleeting")
             :unnarrowed nil))
#+end_src


***  2. Literature Notes

Literature notes are notes extracted from external source. These must include
the reference. These notes have summary or/and highlight from the source, and if
it is possible, tray to indicate:

1. Why this content is relevant?
2. When you read the source?
3. In which content do you think it can be useful?

To answer this question, you can use meta-data as header from of the note, a
link to the project/area which you think that can be useful and a link to
another note with the explanation. This allows you to keep separate the original
content to your conclusion and ideas.

#+begin_src emacs-lisp
  (setq bibliography-files '("~/Documents/Org/bibliography.bib"
                               "~/Documents/Org/phd.bib"))
;;   (after! ivy-bibtex
;;     (setq bibtex-completion-bibliography bibliography-files))


  (use-package! org-ref
    :init (require 'bibtex)
    :config (setq bibtex-autokey-year-length 4
                  bibtex-autokey-name-year-separator "-"
                  bibtex-autokey-year-title-separator "-"
                  bibtex-autokey-titleword-separator "-"
                  bibtex-autokey-titlewords 2
                  bibtex-autokey-titlewords-stretch 1
                  bibtex-autokey-titleword-length 5
                  org-ref-glsentries '("~/Documents/Org/roam/glossary.tex"))
    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    (require 'org-ref-ivy)
    (require 'org-ref-sci-id)
    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-pubmed)
    (require 'org-ref-wos)
    )


  (use-package! org-ref-ivy
    :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
                org-ref-insert-cite-function 'org-ref-cite-insert-ivy
                org-ref-insert-label-function 'org-ref-insert-label-link
                org-ref-insert-ref-function 'org-ref-insert-ref-link
                org-ref-cite-onclick-function (lambda (_)
                  (org-ref-citation-hydra/body))))
#+end_src
*** Citar

[[https://github.com/emacs-citar/citar][Citar]] provides a highly-configurable completing-read front-end to browse and act
on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and
org-cite editing support.

#+begin_src emacs-lisp
  (use-package! citar
    :custom
    (citar-bibliography bibliography-files))
#+end_src
*** citar-org-roam

This package use citar as base to improve the citation process.

#+begin_src emacs-lisp
  (use-package! org-roam-bibtex
    :after org-roam)
  (use-package! citar-org-roam
   :after citar-org-roam
   :config
   (citar-org-roam-mode)
   (citar-register-notes-source 'orb-citar-source
    (list :name "Org-Roam Notes"
     :category 'org-roam-node
     :items #'citar-org-roam--get-candidates
     :hasitems #'citar-org-roam-has-notes
     :open #'citar-org-roam-open-note
     :create #'orb-citar-edit-note
     :annotate #'citar-org-roam--annotate))
   (setq citar-notes-source 'orb-citar-source))
#+end_src


#+begin_src emacs-lisp
  (setq citar-org-roam-note-title-template "${author} - ${title}")
  (add-to-list 'org-roam-capture-templates
               '("r" "bibliography reference" plain "%?"
                 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                    "#+TITLE: ${title}\n#+AUTHOR: ${author}\n#+filetags: Literature\n#+cite-key: ${citekey}\n#+cite-date: ${date} \n#+created: %U\n\n* ${title}\n\n**Abstract\n${abstract}")
                 :unnarrowed t))
  (setq citar-org-roam-capture-template-key "r")
#+end_src
*** Import annotations from Zotero

#+begin_src emacs-lisp
  (defun lem/import-notes-from-zotero (citekey)
  (interactive "sCiteKey: ")
    (let* ((entry (bibtex-completion-get-entry citekey))
           (note (bibtex-completion-get-value "note" entry ""))
           (pandoc-command "pandoc --from latex --to org")
           result)
      (with-temp-buffer
        (shell-command (format "echo \"%s\" | %s" note pandoc-command)
                       (current-buffer))
        (setq result (buffer-substring-no-properties (point-min) (point-max))))
      (insert result)))
#+end_src

I need if I add a new acronym, this will not be added only on the top of the
current buffer, such happens with org-ref. I need the acronym or the glossary
entry will be added into the list with all the acronyms.

#+begin_src emacs-lisp
          (defun lem/add-acronym (label abbrv full)
              (interactive "sLabel: \nsAccronym: \nsFull text: ")
              (save-excursion
        (re-search-backward "#\\+latex_header" nil t)
        (forward-line)
        (when (not (looking-at "^$"))
            (beginning-of-line)
            (insert "\n")
            (forward-line -1))
          (insert (format "#+latex_header_extra: \\newacronym{%s}{%s}{%s}\n"
                          label abbrv full))
          (write-region
           (format
            "\\newacronym{%s}{%s}{%s}\n"
            label abbrv full)
  nil "~/Documents/Org/roam/glossary2.tex" 'append)))

#+end_src
**  3. Permanent notes

Permanent notes are stand-alone ideas, that can be made without any direct
context to other sourced. Can be made as a recap or summary of the information,
but also can be thoughts that popped into your brain while you are working.

The aim of permanent notes is to process the notes you have made and extract
ideas, related content and any kind of useful information for you.


**  4. Index Notes

Index notes are these notes used to group connected notes. Can be a TOC, a sort
description, or whatever you want.
