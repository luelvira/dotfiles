#+TITLE: My emacs configuration
#+DATE:  <2023-08-29 Tue>
#+AUTHOR:  Lucas Elvira Martín

* Table of content :TOC:
- [[#put-this-in-your-initel][PUT THIS IN YOUR init.el]]
- [[#autorun][AUTORUN]]
  - [[#emacs-as-server][Emacs as server]]
- [[#package-system-setup][Package system setup]]
- [[#ui][UI]]
  - [[#font-configuration][Font configuration]]
  - [[#collor-theme][Collor Theme]]
  - [[#better-modeline][Better Modeline]]
- [[#control-and-behaviur][Control and behaviur]]
  - [[#keybinding-configuration][Keybinding configuration]]
  - [[#recent-files][Recent files]]
  - [[#which-key][Which Key]]
  - [[#ivy-and-counsel][ivy and counsel]]
  - [[#helpul][helpul]]
  - [[#text-scaling][Text Scaling]]
  - [[#keep-it-clean][Keep it clean]]
  - [[#projectile-and-magit][Projectile and magit]]
  - [[#terminal-emulators][Terminal emulators]]
-  [[#writing][Writing]]
  - [[#configure-flyspell][Configure flyspell]]
- [[#dired][Dired]]
  - [[#open-dired][Open dired]]
  - [[#keybinding-within-dired][Keybinding within dired]]
  - [[#keybinding-for-peep-dired-mode][Keybinding for peep-dired-mode]]
  - [[#no-littering][No littering]]
- [[#dashboard][DASHBOARD]]
  - [[#launch-dashboard-by-default-when-launch-emacs][Launch dashboard by default when launch emacs]]
  - [[#startup-performance][Startup performance]]
- [[#disable-mouse][Disable mouse]]
- [[#display-language-modes][Display language modes]]
  - [[#cdlatex][cdlatex]]
  - [[#text-mode][text mode]]
- [[#build-your-own-ide-with-lsp-mode][Build your own IDE with lsp-mode]]
  - [[#initial-configuration][Initial configuration]]
  -  [[#better-completion-options-with-company-mode][Better completion options with company-mode]]
  - [[#more-ui-enhancements-lsp-ui-mode][More UI Enhancements lsp-ui-mode]]
  - [[#lsp-treemacs][lsp-treemacs]]
  - [[#minor-modes][Minor modes]]
- [[#org-mode][Org mode]]
- [[#org-roam-the-good-part][Org Roam, the good part]]

* PUT THIS IN YOUR init.el

#+begin_example
(org-babel-load-file
(expand-file-name
"config.org"
  user-emacs-directory))
#+end_example

* AUTORUN
** Emacs as server

This command allow to run emacs as server, so all the startup can be done once
time and connect client to it each time you need
#+begin_src emacs-lisp
  (server-start)
#+end_src
*** Connect a client
To connect a client to the server you need to run

#+begin_example shell
emacsclient --create-frame --alternate-editor=""
 or use an alias
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR opens in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI mode
#+end_example

* Package system setup

Emacs has a built in package manager but it doesn’t make it easy to automatically install packages
on a new system the first time you pull down your configuration. [[https:github.com/jwiegley/use-package][use-package]] is a really helpful
package used in this configuration to make it a lot easier to automate the installation and
configuration of everything else we use.
#+begin_src emacs-lisp

    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

    (unless package-archive-contents
      (package-refresh-contents))

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+end_src

* UI

This section configures basic UI settings that remove unneded elements to make Emacs look a lot more
minimal and modern.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)


;; set line numbers
   (column-number-mode)
   (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font configuration

#+begin_src emacs-lisp
;  (set-face-attribute 'default nil
;			:font "Fira Code"
;			:height 100
;			:weight 'regular)
    ;; Makes commented text and keywords italics.
    ;; This is working in emacsclient but not emacs.
    ;; Your font must have an italic face available.
;    (set-face-attribute 'font-lock-comment-face nil
;    :slant 'italic)
;    (set-face-attribute 'font-lock-keyword-face nil
;   :slant 'italic)
#+end_src


** Collor Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs
modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can
also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-dracula t))
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* Control and behaviur

** Keybinding configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

  
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Set the fixed pitch face
  (use-package general
   :config
   (general-evil-setup t)
   (general-create-definer lucas/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

  (lucas/leader-keys
    "t"  '(:ignore t :which-key "toggles"))
#+end_src

		    
*** Evil mode

**** Try to fix the mayor mode of evil when there isn't a editor
#+begin_src emacs-lisp
  (defun lem/evil-hook ()
  (dolist (mode '(custom-mode
  eshell-mode
  git-rebase-mode
  erc-mode
  circe-server-mode
  circe-chat-mode
  circe-query-mode
  sauron-mode
  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))

#+end_src

The above code does not work, so i try another way
#+begin_src emacs-lisp
  (defun lem/custom-emacs-state () 
  (dolist (p '((minibuffer-inactive-mode . emacs)
               (calendar-mode . emacs)
               (term-mode . emacs)
               (w3m-mode . emacs)
               (eshell-mode . emacs)
               (shell-mode . emacs)
               ;;(message-mode . emacs)
               (compilation-mode . emacs)
               (speedbar-mode . emacs)
               (ivy-occur-mode . emacs)
               (ffip-file-mode . emacs)
               (ivy-occur-grep-mode . normal)
               ))
    (evil-set-initial-state (car p) (cdr p))))
#+end_src

#+begin_src emacs-lisp

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
     (add-hook 'evil-mode-hook 'lem/custom-emacs-state)
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
                         (evil-set-initial-state 'messages-buffer-mode 'normal)
                         (evil-set-initial-state 'dashboard-mode 'normal)
                         :bind (
                                :map evil-insert-state-map
                                     ("<right>" . 'nope)
                                     ("<left>" . 'nope)
                                     ("<up>" . 'nope)
                                     ("<down>" . 'nope)
                                     ("<down-mouse-1>" . nil)
                                     ("<mouse-1>" . nil)
                                     ("<down-mouse-3>" . nil)
                                     ("<mouse-3>" . nil)
                                     :map evil-normal-state-map
                                     ("<down-mouse-1>" . nil)
                                     ("<mouse-1>" . nil)
                                     ("<down-mouse-3>" . nil)
                                     ("<mouse-3>" . nil)
                                     :map    evil-motion-state-map
                                     ("<down-mouse-1>" . nil)
                                     ("<mouse-1>" . nil)
                                     ("<down-mouse-3>" . nil)
                                     ("<mouse-3>" . nil)))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-numbers)
    (define-key evil-normal-state-map (kbd "C-a +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-a -") 'evil-numbers/dec-at-pt)

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode 1))

  (lem/custom-emacs-state)
#+end_src


**** Configure evil collection
#+begin_src emacs-lisp
(defun rune/dont-arrow-me-bro ()
(interactive)
(message "Arrow keys are bad, you know?"))

;; Disable arrow keys in insert mode
(define-key evil-insert-state-map (kbd "<left>") 'rune/dont-arrow-me-bro)
(define-key evil-insert-state-map (kbd "<right>") 'rune/dont-arrow-me-bro)
(define-key evil-insert-state-map (kbd "<down>") 'rune/dont-arrow-me-bro)
(define-key evil-insert-state-map (kbd "<up>") 'rune/dont-arrow-me-bro)


#+end_src

** Recent files
To use the recent file, we can create a keybinding which call the ~recentf-open-files~ function
#+begin_src emacs-lisp
(global-set-key "\C-x\ \C-r" 'counsel-recentf)
#+end_src
** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to
offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control
and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the
bindings under that prefix and which command they run.  This is very useful for learning the
possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** ivy and counsel

ivy is a generic completion mechanism for Emacs. It is based on the idea of incremental narrowing:
the list of candidates is filtered as you type more characters. It is similar to ido-mode, but is
more powerful and flexible.

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection
menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel
is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide
useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each
item.

*** Counsel
Counsel need to be installed before ivy. Also, Counsel provides ivy and swipper
as dependencies, but I will install ivy manually

#+begin_src emacs-lisp
    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))
#+end_src


#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

This are some keybining for changes between buffers

*** Disable '^' of M-x

The following line removes the annoying ‘^’ in things like counsel-M-x and
other ivy/counsel prompts.  The default ‘^’ string means that if you type
something immediately after this string only completion candidates that begin
with what you typed are shown.  Most of the time, I’m searching for a command
without knowing what it begins with though.

#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src

*** Install Smex

Smex is a package that makes M-x remember out history

#+begin_src emacs-lisp
(use-package smex)
(smex-initialize)
#+end_src

*** Ivy Rich

Is an interface for Ivy that provides more information about the commands

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
)
#+end_src


** helpul

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For
example, if you use =describe-function=, you will not only get the documentation about the function,
you will also see the source code of the function and where it gets used in other places in the
Emacs configuration.  It is very useful for figuring out how things work in Emacs.


#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hyda]] to design a transient key binding for quickly adjusting the scale
of the text on screen.  We define a hydra that is bound to =SPACE t s= and, once activated, =j= and
=k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit
the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (lucas/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Keep it clean
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+end_src
** Projectile and magit
*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Documents/git")
    (setq projectile-project-search-path '("~/Documents/git")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src
*** Counsel-projectile
[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] on github

#+begin_src emacs-lisp
  (use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode 1))
#+end_src
*** Magit
#+begin_src emacs-lisp

(use-package magit
:commands (magit-status magit-get-current-branch)
:custom
(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
** Terminal emulators
*** term-mode
#+begin_src emacs-lisp
  (use-package term
  :config
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

;; improve colors
  (use-package eterm-256color
  :hook (term-mode . eterm-256color-mode)) 
#+end_src
*** Shell-mode
Run a shell program on your computer. Does not operate as a terminal emulaor
- ~C-c C-p~ / ~C-c C-n~ Go back / forwards in the buffer's prompts
- ~M-p~ / ~M-n~ Go back / forward in the input history
- ~C-c C-u~ delete the current input string backwards up to the current cursor
- ~counsel-shell-history~ - A searchable history of commands typed into the shell

#+begin_src emacs-lisp
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
#+end_src
*** Eshell-mode
#+begin_src emacs-lisp
(defun lem/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell
  :hook (eshell-first-time-mode . lem/configure-eshell))
#+end_src

#+begin_src emacs-lisp
(use-package eshell-git-prompt

:config
(eshell-git-prompt-use-theme 'powerline))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'esh-opt
  (setq eshell-destroy-buffer-when-process-dies t)
  (setq eshell-visual-commands '("htop" "zsh" "vim")))
#+end_src

*  Writing
** Configure flyspell

Fly spell is a mode that allows you to see typing errors. By default it is disable, but can be
configure to be used on different kinds of situations.

#+begin_src emacs-lisp
  (use-package flyspell
      :config
      (setq ispell-program-name "hunspell"
            ispell-default-dictionary "en_US")
      :hook (text-mode . flyspell-mode)
      :bind (("M-<f7>" . flyspell-buffer)
             ("<f7>" . flyspell-word)
             ("C-;" . flyspell-auto-correct-previous-word)))
#+end_src

* Dired
** Open dired

| Command    | Description                     | KEYBINDING |
| dired      | open dired                      | SPC d d    |
| dired-jump | open dired at current directory | SPC d j    |

** Keybinding within dired

| Command            | Description           | KEYBINDING |
| dired-view-file    | view files in dired   | SPC d v    |
| dired-up-directory | go up one dir         | h          |
| dired-find-file    | go down one directory | l          |

** Keybinding for peep-dired-mode

| Command              | Description    | KEYBINDING |
| peep-dired           | Toggle preview | SPC d p    |
| peep-dired-next-file | Next file      | n          |
| peep-dired-prev-file | Previous file  | p          |


#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
                "d d" '(dired :which-key "Open dired")
                "d j" '(dired-jump :which-key "Dired jump to current")
                "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
(define-key dired-mode-map (kbd "M-p") 'peep-dired)
(evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
(evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
(evil-define-key 'normal peep-dired-mode-map (kbd "n") 'peep-dired-next-file)
(evil-define-key 'normal peep-dired-mode-map (kbd "p") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                            ("jpg" . "sxiv")
                            ("png" . "sxiv")
                            ("mkv" . "mpv")
                            ("mp4" . "mpv")
                            ("pdf" . "evince")))
#+end_src

** TODO No littering

#+begin_src emacs-lisp
(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
    `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))   

#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Launch dashboard by default when launch emacs
#+begin_src emacs-lisp
(use-package all-the-icons)

  
(use-package dashboard
    :ensure t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (projects . 5)
			    (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book"))))
  ; ensure emacs open in dashboard
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Startup performance

#+begin_src emacs-lisp
(use-package gcmh
:config
(gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
    gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
        (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                    (format "%.2f seconds"
                            (float-time
                            (time-subtract after-init-time before-init-time)))
                    gcs-done)))

(setq gc-cons-threshold (* 50 1000 1000))

(defun lem/display-startup-time ()
(message "Emacs loaded in %s with %d garbage collections."
        (format "%.2f seconds"
                (float-time
                    (time-subtract after-init-time before-init-time)))
        gcs-done))

(add-hook 'emacs-startup-hook #'lem/display-startup-time)

#+end_src
* Disable mouse

#+begin_src emacs-lisp
(dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1]  
             [mouse-2] [down-mouse-2] [drag-mouse-2] [double-mouse-2] [triple-mouse-2]
             [mouse-3] [down-mouse-3] [drag-mouse-3] [double-mouse-3] [triple-mouse-3]
             [mouse-4] [down-mouse-4] [drag-mouse-4] [double-mouse-4] [triple-mouse-4]
             [mouse-5] [down-mouse-5] [drag-mouse-5] [double-mouse-5] [triple-mouse-5]))
  (global-unset-key k))

#+end_src

* Display language modes
** cdlatex

cdlatex is a package that allows to display inline math expressions in latex
with the cdlatex mode
#+begin_src emacs-lisp
(use-package cdlatex)
(add-hook 'org-mode-hook #'turn-on-org-cdlatex)
#+end_src

** text mode
#+begin_src emacs-lisp
  (defun lem/text-mode-setup ()
    "test hook"
    (variable-pitch-mode nil)
    (auto-fill-mode 1)
    (visual-line-mode 1)
    (visual-fill-column-mode 1)
    (setq evil-auto-indent nil))

  (add-hook 'tex-mode-hook 'lem/text-mode-setup)
#+end_src

**** Latex

Latex is a markup language bast used to write text without warning about the
format. One very important advantage of this language is that you could define
the style after write  the text and the resulting PDF will be the same,
independent the OS you are using. This not happen when you work with visual editors

***** Configure image and math preview

#+begin_src emacs-lisp
  (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-preview-latex-process-alist
	  '((dvipng :programs
		    ("latex" "dvipng")
		    :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
		    (1.0 . 1.0)
		    :latex-compiler
		    ("latex -interaction nonstopmode -output-directory %o %f")
		    :image-converter
		    ("dvipng -D %D -T tight -bg Transparent -o %O %f"))
	    (dvisvgm :programs
		     ("latex" "dvisvgm")
		     :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
		     (1.7 . 1.5)
		     :latex-compiler
		     ("latex -interaction nonstopmode -output-directory %o %f")
		     :image-converter
		     ("dvisvgm %f -e -n -b min -c %S -o %O"))
	    (imagemagick :programs
			 ("latex" "convert")
			 :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
			 (1.0 . 1.0)
			 :latex-compiler
		 ("pdflatex -interaction nonstopmode -output-directory %o %f")
			 :image-converter
			 ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

***** Configure custom class
Also you could include your own class. This will be address on the [[*Export to latex][Org  section]]


* Build your own IDE with lsp-mode
** Initial configuration
#+begin_src emacs-lisp
  (use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

*** Basic completions
- ~completion-at-point~ for completions
- Signatures when writing methods (~C-n~ or ~C-p~ to cycle)

*** Hover

*** Find definitions and references
 - ~lsp-find-definition~: ~C-c l g r~
 - ~lsp-find-references~: ~C-c l g g~
*** Rename symbol
- ~lsp-rename~: ~C-c l r r~
*** Diagnostics
- ~flymake-show-diagnostics-buffer~ to show diagnostics
*** Code Formatting

- ~lsp-format-buffer~: ~C-c l == =~
Configure formatting options for some languages with =lsp-<language>-format-= variables 

**  Better completion options with company-mode

Company is a Modular text completion framework for emacs

#+begin_src emacs-lisp
  (use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** More UI Enhancements lsp-ui-mode

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (setq lsp-ui-doc-position 'bottom)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-sideline-show-hover nil)
#+end_src
** lsp-treemacs

Provides an even nicer UI on top of lsp-mode using Treemacs

- ~lsp-treemacs-symbols~ - Show a tree view of the symbols in the current file
- ~lsp-treemacs-references~ - Show a tree view for the references of the symbol under the cursor
- ~lsp-treemacs-error-list~ - Show a tree view for the diagnostic messages in the project

  #+begin_src emacs-lisp
        (use-package lsp-treemacs
          :after lsp)

    ; Quicker symbol search with lsp-ivy
    (use-package lsp-ivy)
  #+end_src
** Minor modes
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Org mode

The main reason why I changes to emacs

 - To toggle the view of the outlines use ~S+tab~
 - Move a line up or down: ~meta+up/down~
 - [X] Change a list to checklist

*** Insert heading!

 - ~Ctrl+c Ctr+t~ to toggle TODO state
 - You can change the state with Shift+left/rigth

*** Configure view

#+begin_src emacs-lisp

  (defun lem/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode nil)
    (auto-fill-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (defun lucas/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (use-package org
    :hook (org-mode . lem/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-directory (file-truename "~/Documents/Org/"))
    (lucas/org-font-setup))


  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Wrap the text in a custom column size
  (defun lucas/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          fill-column 80
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . lucas/org-mode-visual-fill))

#+end_src

*** Set up org-agenda

Org agenda is a mode of emacs that allows you to view the task for the week

You can shcedule the todos with org-shedule command or due time with org-deadline. To move arrownd
the date use ~Shift+arrows~


The next setting are, 
- Org-log-done: store a register for the timestampt the task is done
- Org-log-into-drawer hidden the log

 We can get a repeat item ading to the deadline the period of time to
  be repeat, for example a birthday that is repeat each year (see
  the agenda file)

#+begin_src emacs-lisp
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("Tasks.org"
            "Habits.org"))

#+end_src

*** Multiple  keyword sets in one file
From the [[https://orgmode.org/manual/Multiple-sets-in-one-file.html][org manual]], sometimes you want to use different sets of TODO keywords in parallel. For
example a set for task that could be =DONE= or =TODO=, other task that could depends on other and
include the keyword =WAITING= and so on.

*IMPORTANT* You can only use set at time, so you need first to select the correct workflow. The
shortcut to select them is: =C-u C-u C-c C-t=;  =C-s-RIGHT=;  =C-s-LEFT=

#+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "WAIT(w@)" "REVIEW(v)" "READY(r)" "INBOX(i)" "|" "DONE(d!)" "(CANCEL(k@)")))
#+end_src

#+begin_src emacs-lisp

  (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+UC3M")
      ("D" "PHD Tasks" tags-todo "+PHD")
      ("U" "UI Tasks" tags-todo "+UI")

      ;; Low-effort next actions
      ("e" tags-todo "+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))
#+end_src

Sometimes we want to use muttualy exclusive tags. To do it, we can use command ~org-tag-alist
startgroup~. Then, to use it, we use the ~counsel-org-tag~ command

#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

#+end_src

Refill is the ability to move some text to other file when some action happen or event is trigger.  On the following section, we go to setup some triggers for the agenda mode. This allows as to archive the task that are done.

#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

  ; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** Capture template

#+begin_src emacs-lisp

      (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tl" "Task with link" entry (file+olp "~/Documents/Org/Tasks.org" "INBOX")
                 "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("tt" "Task" entry (file+olp "~/Documents/Org/Tasks.org" "INBOX")
                 "* TODO %?\n  %U\n  %i" :empty-lines 1)
            ("j" "Journal Entries")
            ("jj" "Journal" entry
                 (file+olp+datetree "~/Documents/Org/Journal.org")
                 "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
                 ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
                 :empty-lines 1
                 :prepend t)
            ("jm" "Meeting" entry
                 (file+olp+datetree "~/Documents/Org/Journal.org")
                 "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
                 :clock-in :clock-resume
                 :empty-lines 1)

  ;          ("w" "Workflows")
  ;	  ("we" "Checking Email" entry (file+olp+datetree "~/Documents/Org/Journal.org")
  ;	       "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

  ;	  ("m" "Metrics Capture")
  ;	  ("mw" "Weight" table-line (file+headline "~/Documents/Org/Metrics.org" "Weight")
  ;	   "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
            ))
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

**** Org habit

#+begin_src emacs-lisp
 (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

The habits are task with a repeat periods. You can see the task into the agenda-dashboard and remember you to do and what times you skip it.

*** Org links

#+begin_src emacs-lisp
;; An example of how this works.
;; [[arch-wiki:Name_of_Page][Description]]
(setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

*** Configure Babel languages

To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages
for each language you’d like to use. [[https:orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with
org-babel.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (js . t)
      (shell . t)
      ))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Org toc

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Org export

**** Export manpage
#+begin_src emacs-lisp
(use-package ox-man
  :ensure nil)
#+end_src

**** Org export to markdown
#+begin_src emacs-lisp
(use-package ox-gfm)
#+end_src

**** Export html projects

**** Export to latex
#+begin_src emacs-lisp

  (eval-after-load "ox-latex"

    ;; update the list of LaTeX classes and associated header (encoding, etc.)
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (setq org-latex-listings t)


#+end_src

****  Create presentations

To create presentation there is a program called org-tree-slide
#+begin_src emacs-lisp

(use-package hide-mode-line)

(defun lem/presentation-setup ()
  ;; Hide the mode line
  (hide-mode-line-mode 1)
  ;; Display images inline
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images

  ;; Scale the text.  The next line is for basic scaling:
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))

(defun lem/presentation-end ()
  ;; Show the mode line again
  (hide-mode-line-mode 0)

  ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
  ;; (text-scale-mode 0))

  ;; If you use face-remapping-alist, this clears the scaling:
  (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . lem/presentation-setup)
         (org-tree-slide-stop . lem/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil))

#+end_src

*** Structure templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files
in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and
then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and
press =TAB= to expand into such a block. 

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src
*** Publish projects

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
  (use-package htmlize)
#+end_src
* Org Roam, the good part

Org-roam is a tool for networked thought. It reproduces some of the Roam Research's key features
within Org-mode

*** Instalation
The instalation process use the melpa or melpa stable package manager from emacs. 

#+begin_src emacs-lisp
    (use-package org-roam
       :ensure t
       :demand t
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-completion-everywhere t)
       (org-roam-directory (file-truename "~/Documents/Org/roam"))
       :bind (("C-c n l" . org-roam-buffer-toggle)
              ("C-c n f" . org-roam-node-find)
              ("C-c n i" . org-roam-node-insert)
              :map org-mode-map
              ("C-M-i" . completion-at-point)
              :map org-roam-dailies-map
              ("Y" . org-roam-dailies-capture-yesterday)
              ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
  
#+end_src

Some dependencies are:
- dash
- f
- s
- org
- emacsql
- emacsql-sqlite
- magit-section

*** Org roam capture
#+begin_src emacs-lisp
            ;;    (defun my/org-roam-capture-inbox ()
            ;;      (interactive)
            ;;      (org-roam-capture- :node (org-roam-node-create)
            ;;                         :templates '(("i" "inbox" plain "* %?"
            ;;                                      :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))
            ;;
            ;;    (global-set-key (kbd "C-c n b") #'my/org-roam-capture-inbox)
            ;;
            ;;
            ;;    (defun my/org-roam-capture-task ()
            ;;    (interactive)
            ;;    ;; Add the project file to the agenda after capture is finished
            ;;    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)
            ;;
            ;;    ;; Capture the new task, creating the project file if necessary
            ;;    (org-roam-capture- :node (org-roam-node-read
            ;;                              nil
            ;;                              (my/org-roam-filter-by-tag "Project"))
            ;;                       :templates '(("p" "project" plain "* TODO %?"
            ;;                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
            ;;                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
            ;;                                                            ("Tasks"))))))
            ;;
            ;;  (global-set-key (kbd "C-c n t") #'my/org-roam-capture-task)
          (setq org-roam-capture-templates
                '(("d" "default" plain "%?"
                  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+author: %n\n")
                  :unnarrowed t))
                )

#+end_src
  
*** Setting up Org-roam

Org-roam’s capabilities stem from its aggressive caching: it crawls all files within
org-roam-directory, and maintains a cache of all links and nodes.

#+begin_src emacs-lisp
; (setq org-roam-directory (file-truename "~/Documents/Org/roam")) ;; This setting was moved to the package instalation because, there are modules that need it before they are loaded
#+end_src

Autosync mode allows to keep track and cache all changes to maintain cache consistency. Also this
configuration parameter was moved to the package declaration

#+begin_src emacs-lisp
; (org-roam-db-autosync-mode) 
#+end_src

If you're using a vertical completion framework, such as Ivy, Org-roam supports the generation of an
aligned, tabular completion interface. For example, to include a column for tags, one can set
org-roam-node-display-template as such:

#+begin_src emacs-lisp
(setq org-roam-node-display-template
      (concat "${title:*} "
              (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

*** What to cache

One can exclude some nodes, for example, to exclude all the headlines with the ATTACH tag

#+begin_src emacs-lisp
(setq org-roam-db-node-include-function
      (lambda ()
        (not (member "ATTACH" (org-get-tags)))))
#+end_src

*** Add some vars

#+begin_src emacs-lisp
  (setq user-full-name "Lucas Elvira Martín"
        user-mail-address "lucaselvira96@gmail.com")

#+end_src

*** Org roam ui

This package create a website with D3.JS displays the org roam system in a graph-view like obsidian does.
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src


*** Org roam configuration hacks

This section is disable until I finally understand How it works.

#+begin_example emacs-lisp

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t))))

(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))
#+end_example
