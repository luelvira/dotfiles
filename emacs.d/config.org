#+TITLE: My emacs configuration
#+DATE:  <2023-08-29 Tue>
#+AUTHOR:  Lucas Elvira Martín

* Table of content                                                      :TOC:
- [[#put-this-in-your-initel][PUT THIS IN YOUR init.el]]
  - [[#startup-performance][Startup performance]]
- [[#package-system-setup][Package system setup]]
  - [[#enable-straight][Enable straight]]
- [[#keep-it-clean][Keep it clean]]
- [[#custom-library][Custom library]]
- [[#set-encoding-by-default][Set encoding by default]]
- [[#autorun][AUTORUN]]
  - [[#emacs-as-server][Emacs as server]]
- [[#keyboard-binding][Keyboard binding]]
  - [[#esc-as-c-g][ESC as C-g]]
  - [[#rebind-c-u][Rebind C-u]]
  - [[#set-up-evil-mode][Set up evil mode]]
  - [[#which-key][Which Key]]
  - [[#generalel][General.el]]
- [[#ui][UI]]
  - [[#reduce-distraction][Reduce distraction]]
  - [[#collor-theme][Collor Theme]]
  - [[#fonts][Fonts]]
  - [[#better-modeline][Better Modeline]]
  - [[#auto-revert-buffer][Auto revert buffer]]
  - [[#toggle-display-white-space][Toggle display white space]]
  - [[#highlight-matching-parentheses][Highlight matching parentheses]]
  - [[#tramp][Tramp]]
- [[#editing-configuration][Editing configuration]]
  - [[#tab-widths][Tab widths]]
  - [[#commenting-lines][Commenting lines]]
  - [[#automatically-clean-extra-whitespaces][Automatically clean extra whitespaces]]
- [[#configuration-files][Configuration files]]
  - [[#visual-fill-configuration][Visual fill configuration]]
- [[#control-and-behavior][Control and behavior]]
  - [[#recent-files][Recent files]]
- [[#completions-with-ivy-and-counsel][Completions with Ivy and Counsel]]
  - [[#ivy-and-counsel][ivy and counsel]]
  - [[#helpul][helpul]]
- [[#file-browsing][File browsing]]
  - [[#open-dired][Open dired]]
  - [[#keybinding-within-dired][Keybinding within dired]]
  - [[#keybinding-for-peep-dired-mode][Keybinding for peep-dired-mode]]
-  [[#writing][Writing]]
  - [[#configure-flyspell][Configure flyspell]]
  - [[#text-scaling][Text Scaling]]
  - [[#terminal-emulators][Terminal emulators]]
- [[#dashboard][DASHBOARD]]
  - [[#launch-dashboard-by-default-when-launch-emacs][Launch dashboard by default when launch emacs]]
- [[#disable-mouse][Disable mouse]]
- [[#display-language-modes][Display language modes]]
  - [[#cdlatex][cdlatex]]
  - [[#text-mode][text mode]]
- [[#development][Development]]
  - [[#projectile-and-magit][Projectile and magit]]
  - [[#languages][Languages]]
  - [[#github-copilot][Github copilot]]
- [[#org-mode][Org mode]]
  - [[#insert-heading][Insert heading!]]
  - [[#configure-view][Configure view]]
  - [[#configure-babel-languages][Configure Babel languages]]
  - [[#configure-fonts-and-bullets][Configure Fonts and bullets]]
  - [[#structure-templates][Structure templates]]
  - [[#workflow-configuration][WorkFlow configuration]]
  - [[#bindings-some-keys][Bindings some keys]]
  - [[#org-capture][Org capture]]
  - [[#org-toc][Org toc]]
  - [[#org-export][Org export]]
  - [[#sync-org-files][Sync Org files]]
  - [[#org-habit][Org habit]]
  - [[#org-pomodoro][Org pomodoro]]
  - [[#org-todoist][Org-todoist]]
  - [[#set-up-org-agenda][Set up org-agenda]]
- [[#org-roam-the-good-part][Org Roam, the good part]]
  - [[#instalation][Instalation]]
  - [[#org-roam-capture][Org roam capture]]
  - [[#setting-up-org-roam][Setting up Org-roam]]
  - [[#what-to-cache][What to cache]]
  - [[#add-some-vars][Add some vars]]
  - [[#org-roam-ui][Org roam ui]]
  - [[#workflow-configuration-for-zettelkasten-methodology][Workflow configuration for zettelkasten methodology]]
  - [[#managment-time-with-org-dailies][Managment time with Org dailies]]
  - [[#org-roam-configuration-hacks][Org roam configuration hacks]]
  - [[#deft][Deft]]

* PUT THIS IN YOUR init.el

#+begin_example
(org-babel-load-file
(expand-file-name
"config.org"
  user-emacs-directory))
#+end_example

** Startup performance

Make startup faster by reducing the frequency of garbage collection and then use
a hook to measure Emacs startup time.

Also, turn on lexical-binding for the init file!

#+begin_src emacs-lisp
(use-package gcmh
:config
(gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold (* 50 1000 1000)
    gc-cons-percentage 0.6)
;; Profile emacs startup
(add-hook 'emacs-startup-hook
        (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                    (format "%.2f seconds"
                            (float-time
                            (time-subtract after-init-time before-init-time)))
                    gcs-done)))

#+end_src

* Package system setup

Emacs has a built in package manager but it doesn’t make it easy to automatically install packages
on a new system the first time you pull down your configuration. [[https:github.com/jwiegley/use-package][use-package]] is a really helpful
package used in this configuration to make it a lot easier to automate the installation and
configuration of everything else we use.

#+begin_src emacs-lisp

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Enable straight

#+begin_src emacs-lisp 
;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Always use straight to install on systems other than Linux
(setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

;; Clean up unused repos with `straight-remove-unused-repos'
#+end_src

* Keep it clean
First I define the default emacs back-up where all the cache files will be
stored

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
;;
;; Use no-littering to automatically set common paths to the new user-emacs-directory

(use-package no-littering)
#+end_src

Then define where will be store the temporal files

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.cache/emacs/backup/"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+end_src

* Custom library

I would like to make this configuration as modular as possible, so I will break it up into multiples
files. With that in mind, I add a directory to the path.

#+begin_src emacs-lisp
(push "~/Documents/git/dotfiles/emacs.d/lisp" load-path)
#+end_src

* Set encoding by default
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src

* AUTORUN
** Emacs as server

This command allow to run emacs as server, so all the startup can be done once
time and connect client to it each time you need.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
  (server-start)
#+end_src

*** Connect a client
To connect a client to the server you need to run

#+begin_example shell
emacsclient --create-frame --alternate-editor=""
 or use an alias
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR opens in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI mode
#+end_example

* Keyboard binding

** ESC as C-g

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Rebind C-u

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Set up evil mode
Evil mode is a mayor mode that allow to use vim keybindings in emacs

#+begin_src emacs-lisp
  ;; Define a hook to prevent evil mode be load in some modes
  (defun lem/evil-custom-state ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

  (defun rune/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history nil))
#+end_src

*** Install evil mode

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with
which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs
modes with Vi-like keybindings for evil-mode.
#+begin_src emacs-lisp

(use-package evil
 :init
 (setq evil-want-integration t)
 (setq evil-want-keybinding nil)
 (setq evil-want-C-u-scroll t)
 (setq evil-want-C-i-jump t)
 (setq evil-undo-system 'undo-tree)
 :config
 (add-hook 'evil-mode-hook 'lem/evil-custom-state)
 (evil-mode 1)
 (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
 (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
 (evil-set-initial-state 'messages-buffer-mode 'normal)
 (evil-set-initial-state 'dashboard-mode 'normal)

  ;;; Disable arrow keys in insert mode
  (define-key evil-insert-state-map (kbd "<left>") 'rune/dont-arrow-me-bro)
  (define-key evil-insert-state-map (kbd "<right>") 'rune/dont-arrow-me-bro)
  (define-key evil-insert-state-map (kbd "<down>") 'rune/dont-arrow-me-bro)
  (define-key evil-insert-state-map (kbd "<up>") 'rune/dont-arrow-me-bro))
#+end_src

*** Setup undo-tree

View the documentation: [[https://www.dr-qubit.org/undo-tree/undo-tree.txt][undo-tree]]

#+begin_src emacs-lisp :tangle no
(define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
(define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
(setq undo-tree-auto-save-history nil)
#+end_src

*** Install evil-collection
Evil collection is a package that provide evil keybindings for a lot of modes

#+begin_src emacs-lisp
  (use-package evil-collection
   :after evil
   :custom
   (evil-collection-outline-bind-tab-p nil)
   :config
   (evil-collection-init))


  (use-package evil-numbers
     :after evil
     :hook 'lem/evil-mode-number-hook)

  (define-key evil-normal-state-map (kbd "C-a +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-a -") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "C-a g +") 'evil-numbers/inc-at-pt-incremental)
  (define-key  evil-normal-state-map (kbd "C-a g -") 'evil-numbers/dec-at-pt-incremental)

  (use-package evil-surround
   :ensure t
   :config
  (global-evil-surround-mode 1))

#+end_src


** Which Key
  
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to
offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control
and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the
bindings under that prefix and which command they run.  This is very useful for learning the
possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** General.el

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer lem/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer lem/ctrl-c-keys
    :keymaps '(normal emacs)
        :prefix "C-c"
        :global-prefix "C-c"))
#+end_src

* UI

This section configures basic UI settings that remove unneded elements to make Emacs look a lot more
minimal and modern.

** Reduce distraction

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

Maximize window by default
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Enable line numbers
#+begin_src emacs-lisp :tangle no
;; set line numbers
   (column-number-mode)
   (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Try this new approach

#+begin_src emacs-lisp
(column-number-mode)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

Ignore warning messages when following symlinks

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

** Collor Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs
modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can
also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
(use-package spacegray-theme :defer t)
(use-package doom-themes :defer t)
(load-theme 'doom-palenight t)
(doom-themes-visual-bell-config)
#+end_src

** Fonts

#+begin_src emacs-lisp
  ;; Set the font
  (set-face-attribute 'default nil :font "Fira Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "Fira Code" :height 1.0 :inherit 'default)
  (set-face-attribute 'variable-pitch nil :family "Noto Sans" :weight 'regular :inherit 'default)

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line
configuration for Emacs.  The default configuration is quite good but you can
check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need
to run `M-x all-the-icons-install-fonts` so that mode line icons display
correctly.

#+begin_src emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
  display-time-default-load-average nil)
;; Dimish modeline clutter hides pesky minor modes 
(use-package diminish)

    ;; All the icons
(use-package all-the-icons)
(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
       :init (doom-modeline-mode 1)
       :hook (after-init . doom-modeline-init)
  ;    :custom-face
  ;    (mode-line ((t (:height 0.85))))
  ;    (mode-line-inactive ((t (:height 0.85))))
      :custom
      (doom-modeline-height 15)
  ;    (doom-modeline-bar-width 6)
  ;    (doom-modeline-lsp t)
  ;    (doom-modeline-github nil)
  ;    (doom-modeline-minor-modes t)
  ;    (doom-modeline-persp-name nil)
  ;    (doom-modeline-buffer-file-name-style 'truncate-except-project) 
  ;    (doom-modeline-major-mode-icon nil)
      )
#+end_src

** Auto revert buffer

#+begin_src emacs-lisp
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+end_src

** Toggle display white space

#+begin_src emacs-lisp
(lem/leader-key-def
  "t"  '(:ignore t :which-key "toggles")
  "tw" '(whitespace-mode :which-key "whitespace"))
#+end_src

** Highlight matching parentheses

#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

** Tramp

Tramp is a built-in package that allows you to open files over SSH, su, and sudo
from within Emacs.  It's incredibly useful if you need to edit files as root or
on a remote machine frequently.

#+begin_src emacs-lisp
(use-package tramp
  :defer t
  :config
  (setq tramp-default-method "ssh"))
#+end_src

* Editing configuration

** Tab widths
Default tab width is 8, which is too much. We can change it to 4.

#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)
;; use spaces instead of tabs
(setq-default indent-tabs-mode nil)
#+end_src

** Commenting lines

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Automatically clean extra whitespaces

#+begin_src emacs-lisp
(use-package ws-butler
  :hook (prog-mode . ws-butler-mode))
#+end_src

* Configuration files
We can set a sortcut to open the config file from the emacs directory

#+begin_src emacs-lisp
  (lem/leader-key-def
  "fd" '((lambda () (interactive) (counsel-find-file "~/Documents/git/dotfiles")) :which-key "Config")
  "fo" '((lambda () (interactive) (counsel-find-file "~/Documents/Org/")) :which-key "Org files")
  "fe" '(:ignore t :which-key "Emacs Config")
  "fec" '((lambda () (interactive) (find-file "~/Documents/git/dotfiles/emacs.d/config.org")) :which-key "Emacs Config file")
  "few" '((lambda () (interactive) (find-file "~/Documents/git/dotfiles/emacs.d/org-workflow.org")) :which-key "Emacs workflow file")
  "fez" '((lambda () (interactive) (find-file "~/Documents/git/dotfiles/emacs.d/org-zettelkasten.org")) :which-key "Emacs zettel file"))
#+end_src



** Visual fill configuration

#+begin_src emacs-lisp
  ;; Wrap the text in a custom column size
  (defun lucas/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          fill-column 80
          visual-fill-column-center-text t)
    (visual-fill-column-mode t))

  (use-package visual-fill-column
  :defer t
    :hook (org-mode . lucas/org-mode-visual-fill))
#+end_src

* Control and behavior
** Recent files

To use the recent file, we can create a keybinding which call the ~recentf-open-files~ function
#+begin_src emacs-lisp
  (lem/leader-key-def
  "f" '(:ignore t :which-key  "Files")
  "fr" '(counsel-recentf :which-key "Recent files"))
#+end_src

* Completions with Ivy and Counsel
** ivy and counsel

ivy is a generic completion mechanism for Emacs. It is based on the idea of incremental narrowing:
the list of candidates is filtered as you type more characters. It is similar to ido-mode, but is
more powerful and flexible.

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection
menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel
is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide
useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each
item.

#+begin_src emacs-lisp

      (use-package hydra
        :defer 1)

        (use-package ivy
          :diminish
          :bind (("C-s" . swiper)
          :map ivy-minibuffer-map
          ("TAB" . ivy-alt-done)
              ("C-l" . ivy-alt-done)
              ("C-j" . ivy-next-line)
              ("C-k" . ivy-previous-line)
              :map ivy-switch-buffer-map
              ("C-k" . ivy-previous-line)
              ("C-l" . ivy-done)
              ("C-d" . ivy-switch-buffer-kill)
              :map ivy-reverse-i-search-map
              ("C-k" . ivy-previous-line)
              ("C-d" . ivy-reverse-i-search-kill))
            :init
            (ivy-mode 1)
            :config
            (setq ivy-use-virtual-buffers t)
            (setq ivy-wrap t)
            (setq ivy-count-format "(%d/%d) ")
            (setq enable-recursive-minibuffers t)
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

      (lem/leader-key-def
          "C-S" '(counsel-projectile-grep :which-key "Projectile grep"))


      (use-package ivy-hydra
        :defer t
        :after hydra)

      (use-package ivy-rich
        :init
        (ivy-rich-mode 1)
        :after counsel
        :config
        (setq ivy-format-function #'ivy-format-function-line)
        (setq ivy-rich-display-transformers-list
              (plist-put ivy-rich-display-transformers-list
                         'ivy-switch-buffer
                         '(:columns
                           ((ivy-rich-candidate (:width 40))
                            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                            (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                            (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                           :predicate
                           (lambda (cand)
                             (if-let ((buffer (get-buffer cand)))
                                 ;; Don't mess with EXWM buffers
                                 (with-current-buffer buffer
                                   (not (derived-mode-p 'exwm-mode)))))))))
#+end_src

*** Counsel

Counsel need to be installed before ivy. Also, Counsel provides ivy and swipper
as dependencies, but I will install ivy manually

#+begin_src emacs-lisp

  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           ;; ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
#+end_src

*** Disable '^' of M-x

The following line removes the annoying ‘^’ in things like counsel-M-x and
other ivy/counsel prompts.  The default ‘^’ string means that if you type
something immediately after this string only completion candidates that begin
with what you typed are shown.  Most of the time, I’m searching for a command
without knowing what it begins with though.

#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src

*** Install Smex

Smex is a package that makes M-x remember out history

#+begin_src emacs-lisp
(use-package smex)
(smex-initialize)
#+end_src

*** Flx
Flx is a package that makes ivy fuzzy search

#+begin_src emacs-lisp
(use-package flx  ;; Improves sorting for fuzzy-matched results
  :after ivy
  :defer t
  :init
  (setq ivy-flx-limit 10000))
#+end_src

*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
#+end_src

*** Orderless

Orderless improves candidate filtering create pattern by words separate with
spaces and display any command which has the same words in any order

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Completion annotations

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

*** Completion action

#+begin_src emacs-lisp
(use-package embark
  :bind (("C-S-a" . embark-act)
         :map minibuffer-local-map
         ("C-d" . embark-act))
  :config

  ;; Show Embark actions via which-key
  (setq embark-action-indicator
        (lambda (map)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))

(use-package embark-consult
  :after embark)
#+end_src

*** Snippets

#+begin_src emacs-lisp
    (use-package yasnippet
      :hook (prog-mode . yas-minor-mode)
      :config
      (yas-reload-all)
      (yas-global-mode 1))
(use-package yasnippet-snippets)

;;  (use-package yasnippet-snippeets)
#+end_src
***  Better completion options with company-mode

Company is a Modular text completion framework for emacs

#+begin_src emacs-lisp
  (use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src


** helpul

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For
example, if you use =describe-function=, you will not only get the documentation about the function,
you will also see the source code of the function and where it gets used in other places in the
Emacs configuration.  It is very useful for figuring out how things work in Emacs.


#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* File browsing
** Open dired

| Command    | Description                     | KEYBINDING |
|------------+---------------------------------+------------|
| dired      | open dired                      | SPC d d    |
| dired-jump | open dired at current directory | SPC d j    |

** Keybinding within dired

| Command            | Description           | KEYBINDING |
| dired-view-file    | view files in dired   | SPC d v    |
| dired-up-directory | go up one dir         | h          |
| dired-find-file    | go down one directory | l          |

** Keybinding for peep-dired-mode

| Command              | Description    | KEYBINDING |
| peep-dired           | Toggle preview | SPC d p    |
| peep-dired-next-file | Next file      | n          |
| peep-dired-prev-file | Previous file  | p          |


#+begin_src emacs-lisp
       (use-package all-the-icons-dired)
       ;;(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC" "d d" '(dired :which-key "Open dired") "d j" '(dired-jump :which-key "Dired jump to current") "d p" '(peep-dired :which-key "Peep-dired"))

       (use-package dired
         :ensure nil
         :defer 1
         :config
         (setq dired-listing-swithces "--group-directories-first"
               dired-omit-files "^\\.[^.].*"
               delete-by-moving-to-trash t)
         (autoload 'dired-omit-mode "dired-x")
         (add-hook 'dired-load-hook
                   (lambda ()
                     (interactive)
                   (dired-collapse)))
         (add-hook 'dired-mode-hook
                (lambda () (interactive)
                  (dired-omit-mode 1)
                  (dired-hide-details-mode 1)
                  (all-the-icons-dired-mode 1)))

       (use-package dired-single :defer t)
       (use-package dired-ranger :defer t)
       (use-package dired-collapse :defer t)
    (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "H" 'dired-omit-mode
        "l" 'dired-single-buffer
        "y" 'dired-ranger-copy
        "X" 'dired-ranger-move
        "p" 'dired-ranger-paste))
  #+end_src

*** Open files Externally

#+begin_src emacs-lisp :tangle no
  (use-package openwith
    :config
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp '("pdf" )) "evince" '(file)))))
  (openwith-mode 1)

#+end_src
*  Writing
** Configure flyspell

Fly spell is a mode that allows you to see typing errors. By default it is disable, but can be
configure to be used on different kinds of situations.

#+begin_src emacs-lisp
  (use-package flyspell
      :config
      (setq ispell-program-name "hunspell"
            ispell-default-dictionary "en_US")
      :hook (text-mode . flyspell-mode)
      :bind (("M-<f7>" . flyspell-buffer)
             ("<f7>" . flyspell-word)
             ("C-;" . flyspell-auto-correct-previous-word)))
#+end_src

*** Toggle dictionaries

#+begin_src emacs-lisp
  (defun lem/switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
     (change (if (string= dic "en_US") "es_ES" "en_US")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

  (global-set-key (kbd "<f8>")   'lem/switch-dictionary)
#+end_src

*** Install language tool

Language tool is a software that check both, grammar and spelling in different
languages.

**** Install the binary

#+begin_src shell
curl https://languagetool.org/download/LanguageTool-stable.zip -o /tmp/LanguageTool-stable.zip
mkdir -p ~/.local/lib/
unzip /tmp/LanguageTool-stable.zip -d ~/.local/lib/languageTool
#+end_src

#+begin_src emacs-lisp
  (use-package langtool
     :config
     (setq langtool-language-tool-jar "~/.local/lib/languageTool/LanguageTool-6.3/languagetool-commandline.jar"
  langtool-default-language "en-US"))
#+end_src



** Text Scaling

I use the default command to text scale:
- =C-x C-+=  text-scale-increate
- =C-x C--=  text-scale-decrease

** Terminal emulators

*** term-mode
#+begin_src emacs-lisp
  (use-package term
  :config
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

;; improve colors
  (use-package eterm-256color
  :hook (term-mode . eterm-256color-mode)) 
#+end_src

*** Shell-mode

Run a shell program on your computer. Does not operate as a terminal emulaor
- ~C-c C-p~ / ~C-c C-n~ Go back / forwards in the buffer's prompts
- ~M-p~ / ~M-n~ Go back / forward in the input history
- ~C-c C-u~ delete the current input string backwards up to the current cursor
- ~counsel-shell-history~ - A searchable history of commands typed into the shell

#+begin_src emacs-lisp :tangle no
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
#+end_src
*** Eshell-mode

#+begin_src emacs-lisp :tangle no
(defun lem/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell
  :hook (eshell-first-time-mode . lem/configure-eshell))

(use-package eshell-git-prompt

:config
(eshell-git-prompt-use-theme 'powerline))

(with-eval-after-load 'esh-opt
  (setq eshell-destroy-buffer-when-process-dies t)
  (setq eshell-visual-commands '("htop" "zsh" "vim")))
#+end_src


* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Launch dashboard by default when launch emacs
#+begin_src emacs-lisp
(use-package all-the-icons)

  
(use-package dashboard
    :ensure t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (projects . 5)
			    (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book"))))
  ; ensure emacs open in dashboard
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
* Disable mouse

#+begin_src emacs-lisp
(dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1]  
             [mouse-2] [down-mouse-2] [drag-mouse-2] [double-mouse-2] [triple-mouse-2]
             [mouse-3] [down-mouse-3] [drag-mouse-3] [double-mouse-3] [triple-mouse-3]
             [mouse-4] [down-mouse-4] [drag-mouse-4] [double-mouse-4] [triple-mouse-4]
             [mouse-5] [down-mouse-5] [drag-mouse-5] [double-mouse-5] [triple-mouse-5]))
  (global-unset-key k))

#+end_src

* Display language modes
** cdlatex

cdlatex is a package that allows to display inline math expressions in latex
with the cdlatex mode
#+begin_src emacs-lisp
(use-package cdlatex)
;;(add-hook 'org-mode-hook #'turn-on-org-cdlatex)
#+end_src

** text mode
#+begin_src emacs-lisp
  (defun lem/text-mode-setup ()
    "test hook"
    (variable-pitch-mode 1)
    (auto-fill-mode 1)
    ;(visual-line-mode 1)
    (visual-fill-column-mode 1)
    (setq evil-auto-indent nil))

  (add-hook 'tex-mode-hook 'lem/text-mode-setup)
#+end_src

**** Latex

Latex is a markup language bast used to write text without warning about the
format. One very important advantage of this language is that you could define
the style after write  the text and the resulting PDF will be the same,
independent the OS you are using. This not happen when you work with visual
editors. 

***** Configure image and math preview

#+begin_src emacs-lisp
  (setq org-preview-latex-default-process 'dvisvgm)
    (setq org-preview-latex-process-alist
	  '((dvipng :programs
		    ("latex" "dvipng")
		    :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
		    (1.0 . 1.0)
		    :latex-compiler
		    ("latex -interaction nonstopmode -output-directory %o %f")
		    :image-converter
		    ("dvipng -D %D -T tight -bg Transparent -o %O %f"))
	    (dvisvgm :programs
		     ("latex" "dvisvgm")
		     :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
		     (1.7 . 1.5)
		     :latex-compiler
		     ("latex -interaction nonstopmode -output-directory %o %f")
		     :image-converter
		     ("dvisvgm %f -e -n -b min -c %S -o %O"))
	    (imagemagick :programs
			 ("latex" "convert")
			 :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
			 (1.0 . 1.0)
			 :latex-compiler
		 ("pdflatex -interaction nonstopmode -output-directory %o %f")
			 :image-converter
			 ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

***** Configure custom class
Also you could include your own class. This will be address on the [[*Export to latex][Org  section]]

* Development
** Projectile and magit
*** Projectile

#+begin_src emacs-lisp
    (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    (projectile-register-project-type 'npm '("package.json")
                                    :project-file "package.json"
                                    :compile "npm install"
                                    :test "npm test"
                                    :run "npm start"
                                    :test-suffix ".spec")
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
  ;  (when (file-directory-p "~/Documents/git")
  ;    (setq projectile-project-search-path '("~/Documents/git")))
    (setq projectile-switch-project-action #'projectile-dired))

  
#+end_src
**** Counsel-projectile
[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] on github

#+begin_src emacs-lisp
  (use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode 1))
#+end_src
**** Key binding for projectile
#+begin_src emacs-lisp
    (lem/leader-key-def
  "p"  '(:ignore t :which-key "Projectile")
  "pf" '(projectile-find-file :which-key "Projectile find file")
  "ps" '(projectile-switch-project :which-key "Projectile switch project")
  "pF" '(counsel-rg :which-key "Rip grep")
  "pc" '(projectile-compile-project :which-key "Compile Project")
  "pd" '(projectile-dired :which-key "Projectile dired"))


#+end_src
*** Magit
#+begin_src emacs-lisp
(use-package magit
:commands (magit-status magit-get-current-branch)
:custom
(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
**** Magit TODOs
This extension display all the comments with the word TODO inside the project
#+begin_src emacs-lisp
  (use-package magit-todos
  :defer t)
#+end_src
*** Git-gutter
Git gutter is a software which make easy to view the difference between a file
and the last commit from the same file
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :ensure t
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** Languages

*** LSP (Language server protocol)
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands lsp
    :hook((typescript-mode js2mode web-mode) . lsp)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (lem/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)


  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-show-hover nil
          lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  #+end_src

**** lsp-treemacs

Provides an even nicer UI on top of lsp-mode using Treemacs

- ~lsp-treemacs-symbols~ - Show a tree view of the symbols in the current file
- ~lsp-treemacs-references~ - Show a tree view for the references of the symbol under the cursor
- ~lsp-treemacs-error-list~ - Show a tree view for the diagnostic messages in the project

  #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :after lsp
       :commands lsp-ivy-treemacs-errors-list)

  #+end_src

**** configure lsp for python
#+begin_src emacs-lisp

  (use-package lsp-pyright
    :hook (python-mode . (lambda () (require 'lsp-pyright)))
    :init (when (executable-find "python3")
            (setq lsp-pyright-python-executable-cmd "python3")))

#+end_src


*** TypeScript and JavaScript

Configure both languages as equals
#+begin_src emacs-lisp :tangle no

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 4))

  (defun lem/set-js-indentation ()
    (setq js-indent-level 4)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 4))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))
    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings t)
    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'lem/set-js-indentation))

  (use-package apheleia
    :config
    (apheleia-global-mode +1))


  (use-package prettier-js
    :config
    (setq prettier-js-show-errors t))
#+end_src

*** HTML
#+begin_src emacs-lisp
      (use-package web-mode
        ;:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\|css\\)\\'"
        :config
        (setq-default web-mode-code-indent-offset 2)
        (setq-default web-mode-markup-indent-offset 2)
        (setq-default web-mode-attribute-indent-offset 2))

      (defun lem/web-hook ()
        "Hook for web mode"
        (setq web-mode-markup-indent-offset 2
              web-mode-css-indent-offset 2
              web-mode-code-indent-offset 4))
      (add-hook 'web-mode-hook  'lem/web-hook)

    (use-package emmet-mode
      :mode "(\\.\\(html?\\|css\\)\\'")

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package skewer-mode
    :straight t)
#+end_src


#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp

(use-package smartparens
  :hook (prog-mode . smartparens-mode))

#+end_src

Rainbow mode allows to set the background of HTML color strings
#+begin_src emacs-lisp
(use-package rainbow-mode
  :defer t
  :hook (org-mode
         emacs-lisp-mode
         web-mode
         typescript-mode
         js2-mode))
#+end_src

** Github copilot

Download the unofficial copilot version for emacs
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t)
(define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)

#+end_src

* Org mode
The main reason why I changes to emacs

 - To toggle the view of the outlines use ~S+tab~
 - Move a line up or down: ~meta+up/down~
 - [X] Change a list to checklist

** Insert heading!
 - ~Ctrl+c Ctr+t~ to toggle TODO state
 - You can change the state with Shift+left/rigth
** Configure view

#+begin_src emacs-lisp

  (defun lem/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (auto-fill-mode 1)
        ;(visual-line-mode 1)
        (setq evil-auto-indent nil)
        (diminish org-indent-mode))

  (defun lem/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region
                                             (match-beginning 1)
                                             (match-end 1) "•")))))))

  (use-package org
    :defer t
    :hook (org-mode . lem/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers nil
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-cycle-separator-lines 2)
    (setq org-modules
          '(org-habit
            org-pomodoro
            ))


    (setq org-refile-targets '((nil :maxlevel . 2)
                               (org-agenda-files :maxlevel . 1)))
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t))
#+end_src

** Configure Babel languages

To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages
for each language you’d like to use. [[https:orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with
org-babel.

#+begin_src emacs-lisp
     
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (js . t)
   (shell . t)
   (gnuplot . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)
(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
#+end_src  

** Configure Fonts and bullets

#+begin_src emacs-lisp

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 3.0)
                    (org-level-2 . 2.5)
                    (org-level-3 . 2.0)
                    (org-level-4 . 1.75)
                    (org-level-5 . 1.5)
                    (org-level-6 . 1.25)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1))))

   (require 'org-indent)

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)
#+end_src

** Structure templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files
in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and
then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and
press =TAB= to expand into such a block. 

You can add more =src= block templates below by copying one of the lines and
changing the two strings at the end, the first to be the template name and the
second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src python"))
  (add-to-list 'org-structure-template-alist '("ex" . "export"))
#+end_src

** WorkFlow configuration
The configuration file of this section was moved to
[[file:~/Documents/git/dotfiles/emacs.d/org-workflow.org][org-workflow.org]].

#+begin_src emacs-lisp
    ;; first tangle the content
  (unless (file-directory-p  "~/Documents/git/dotfiles/emacs.d/lisp")
    (make-directory "~/Documents/git/dotfiles/emacs.d/lisp"))

  (org-babel-tangle-file "~/Documents/git//dotfiles/emacs.d/org-workflow.org")
  (require 'org-workflow)
  (setq org-habits-show-all-today t
        org-habit-show-habits-only-for-today nil)
#+end_src

** Bindings some keys

#+begin_src emacs-lisp
  (lem/leader-key-def
   "o" '(:ignore t :which-key "org mode")
   "oa" '(org-agenda :which-key "Status")
   "ot" '(org-todo-list :which-key "Show TODOs")
   "oc" '(org-capture t :which-key "Capture"))

#+end_src

** Org capture

In this subsection, I will add some capture to the capture list, that are not
related with any workflow

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               `("m" "Fondos" table-line
                 (file+headline ,(expand-file-name "Metrics.org" org-directory) "Fondos")
                 "| %U | %^{fondo1} | %^{fondo2} |" :kill-buffer t) t)
  (add-to-list 'org-capture-templates
               `("h" "Habit" entry
                 (file+headline ,(expand-file-name "Habits.org" org-directory) "Habits")
                 "* TODO %?\n:PROPERTIES:\n:STYLE:    habit\n:END:\n") t)

#+end_src

** Org toc

#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** Org export

Org allows you to export the file to different formats. This section install
some needed packages

#+begin_src emacs-lisp
(use-package htmlize) ; export code blocks with syntax highlighting
(use-package ox-man ; export backend for manpages
  :ensure nil)
(use-package ox-gfm) ; export backend for github flavored markdown
#+end_src

*** Export to latex
#+begin_src emacs-lisp

  (eval-after-load "ox-latex"

    ;; update the list of LaTeX classes and associated header (encoding, etc.)
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (setq org-latex-listings t)
#+end_src

***  Create presentations

To create presentation there is a program called org-tree-slide
#+begin_src emacs-lisp

(use-package hide-mode-line)

(defun lem/presentation-setup ()
  ;; Hide the mode line
  (hide-mode-line-mode 1)
  ;; Display images inline
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images

  ;; Scale the text.  The next line is for basic scaling:
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))

(defun lem/presentation-end ()
  ;; Show the mode line again
  (hide-mode-line-mode 0)

  ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
  ;; (text-scale-mode 0))

  ;; If you use face-remapping-alist, this clears the scaling:
  (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . lem/presentation-setup)
         (org-tree-slide-stop . lem/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil))

#+end_src

#+begin_src emacs-lisp
(use-package org-ref)
(setq bibtex-completion-bibliography (mapcar (lambda (file) (concat "/home/lucas/Documents/Org/" file)) '("My library.bib" "TFM_LUCAS.bib")))
#+end_src


*** Publish projects

Org publish allows you to convert your org file into html, pdf, markdown and other formats.

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
  (use-package htmlize)
#+end_src

** Sync Org files

I have a script which try to keep sync with a repository on [[https://codeberg.org/luelvira/Org][codeberg]]. This repo
contains the org files only, and it is named sync

#+begin_src emacs-lisp
    (defun lem/sync (path)
      (shell-command-to-string (format "/home/lucas/.local/bin/sync.sh %s" path)))

    (defun lem/sync-org ()
    "Sync the Org foler with an external script"
    (interactive)
    (lem/sync "~/Documents/Org"))

    (defun lem/sync-conf ()
    "Sync the config foler with an external script"
  (interactive)
  (lem/sync "~/Documents/git/dotfiles"))

    ;; (add-hook 'after-save-hook 'lem/sync) Use as hook generate a lot of commits
#+end_src

** Org habit

#+begin_src emacs-lisp
 (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

The habits are task with a repeat periods. You can see the task into the
agenda-dashboard and remember you to do and what times you skip it.

** Org pomodoro

#+begin_src emacs-lisp
  (use-package org-pomodoro
      :ensure t
      :after org
      :config
      (setq
       alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))
       org-pomodoro-length 90
       org-pomodoro-short-break-length 10
       org-pomodoro-long-break-length 20
       org-pomodoro-clock-break t
       org-pomodoro-manual-break t))

    (defun set-pomodoro-timer (minutes)
      (interactive "nMinutes: ")
      (setq org-pomodoro-length minutes))

  (lem/leader-key-def
    "op" '(:ignore t :which-key "Pomodoro")
    "ops" '(org-pomodoro :whick-key "Start org pomodoro")
    "opt" '(set-pomodoro-timer :which-key "Set pomodoro timer")) 

#+end_src

** Org-todoist
This package enable a syncronization between emacs org-mode and todoist api. I
like this package because it is written in emacs-lisp instead of ruby or python

#+begin_src emacs-lisp
  (use-package todoist
    :config (setq todoist-token "550e8205143c11d3cd92c00864ac716fd78bfaa8"))
#+end_src

** Set up org-agenda

Refill is the ability to move some text to other file when some action happen or
event is trigger.  On the following section, we go to setup some triggers for
the agenda mode. This allows as to archive the task that are done.

#+begin_src emacs-lisp
;;Save Org buffers after refiling!
;; (advice-add 'org-refile :after 'org-save-all-org-buffers)

;;  (defun my/org-roam-copy-todo-to-today ()
;;   (interactive)
;;   (let ((org-refile-keep t) ;; Set this to nil to delete the original!
;;         (org-roam-dailies-capture-templates
;;          '(("t" "tasks" entry "%?"
;;              :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
;;         (org-after-refile-insert-hook #'save-buffer)
;;         today-file
;;         pos)
;;    (save-window-excursion
;;     (org-roam-dailies-capture-templates (current-time) t)
;;     (setq today-file (buffer-file-name))
;;     (setq pos (point)))
;;
;;    ;; Only refile if the target file is different than the current file
;;    (unless (equal (file-truename today-file)
;;             (file-truename (buffer-file-name)))
;;     (org-refile nil nil (list "Tasks" today-file nil pos)))))
;;
;;
;;  (save-window-excursion
;;   (org-roam-dailies-capture-templates (current-time) t)
;;   (setq today-file (buffer-file-name))
;;   (setq pos (point)))
;;
;;  (add-to-list 'org-after-todo-state-change-hook
;;   (lambda ()
;;    (when (equal org-state "DONE")
;;     (my/org-roam-copy-todo-to-today))))
;;
;;  (setq org-archive-location (concat org-directory "/Archive.org::datetree/** From %s"))
#+end_src

* Org Roam, the good part

Org-roam is a tool for networked thought. It reproduces some of the Roam Research's key features
within Org-mode

** Instalation
The instalation process use the melpa or melpa stable package manager from emacs. 

#+begin_src emacs-lisp
  (use-package org-roam
  :straight t
     :custom
     (org-roam-directory (file-truename "~/Documents/Org/roam"))
     (org-roam-completion-everywhere t)
     (org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
     :bind (("C-c n l" . org-roam-buffer-togle)
            ("C-c n f" . org-roam-node-find)
            ("C-c n i" . org-roam-node-insert)
            ("C-c n I" . org-roam-node-insert-immediate)
            :map org-mode-map
            ("C-M-i" . completion-at-point)
            :map org-roam-dailies-map
            ("Y" . org-roam-dailies-capture-yesterday)
            ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

#+end_src

Some dependencies are:
- dash
- f
- s
- org
- emacsql
- emacsql-sqlite
- magit-section

** Org roam capture

The capture template allows you to create a file with a default content based in
the templates system of the org-mode

#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+author: %n\n")
           :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
  :unnarrowed t)))
#+end_src

*** Insert immediately
Sometimes you just want to insert a link to complete it latter. Org roam by
default does not have this capability, but we can define a new function with it.

#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src


This function will expand the first template thanks to the ~car~ function which
return the first element of the list. If we want to take the rest of the list,
we should use the ~cdr~ operator. For a specific position, use ~nth~ as show
bellow [[https://stackoverflow.com/a/36129344][get list element by position]]
  
** Setting up Org-roam

Org-roam’s capabilities stem from its aggressive caching: it crawls all files within
org-roam-directory, and maintains a cache of all links and nodes.

#+begin_src emacs-lisp
; (setq org-roam-directory (file-truename "~/Documents/Org/roam")) ;; This setting was moved to the package instalation because, there are modules that need it before they are loaded
#+end_src

Autosync mode allows to keep track and cache all changes to maintain cache
consistency. Also this configuration parameter was moved to the package declaration

#+begin_src emacs-lisp
; (org-roam-db-autosync-mode) 
#+end_src

If you're using a vertical completion framework, such as Ivy, Org-roam supports the generation of an
aligned, tabular completion interface. For example, to include a column for tags, one can set
org-roam-node-display-template as such:

#+begin_src emacs-lisp
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:*}" 'face 'org-tag)))
#+end_src

** What to cache

One can exclude some nodes, for example, to exclude all the headlines with the ATTACH tag

#+begin_src emacs-lisp
(setq org-roam-db-node-include-function
      (lambda ()
        (not (member "ATTACH" (org-get-tags)))))
#+end_src

** Add some vars

#+begin_src emacs-lisp
  (setq user-full-name "Lucas Elvira Martín"
        user-mail-address "lucaselvira96@gmail.com")

#+end_src

** Org roam ui

This package create a website with D3.JS displays the org roam system in a graph-view like obsidian does.
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

** Workflow configuration for zettelkasten methodology
The content of this file was moved to [[file:org-zettelkasten.org][org-zettelkasten.org]]

#+begin_src emacs-lisp
  (org-babel-tangle-file "~/Documents/git/dotfiles/emacs.d/org-zettelkasten.org")
  (require 'org-zettel)
#+end_src

** Managment time with Org dailies

#+begin_src elisp

  (setq org-roam-dailies-capture-templates
      '(("d" "day" entry "** %<%I:%M %p>: %?"
         :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n* Time Managment\n#+BEGIN: clocktable :scope agenda :maxlevel 6 :block %<%Y-%m-%d>\n#+CAPTION: \n#+END:" ("Notes")))))
#+end_src

** Org roam configuration hacks

#+begin_src emacs-lisp
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

    (defun my/org-roam-list-notes-by-tag (tag-name)
      (mapcar #'org-roam-node-file
              (seq-filter
               (my/org-roam-filter-by-tag tag-name)
               (org-roam-node-list))))

    (defun my/org-roam-refresh-agenda-list ()
      (interactive)
      (setq org-agenda-files (delete-dups (append org-agenda-files (my/org-roam-list-notes-by-tag "Project")))))
    (my/org-roam-refresh-agenda-list)

    ;; Build the agenda list the first time for the session

    (defun my/org-roam-project-finalize-hook ()
      "Adds the captured project file to `org-agenda-files' if the capture was not aborted."
      ;; Remove the hook since it was added temporarily
      (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

      ;; Add project file to the agenda list if the capture was confirmed
      (unless org-note-abort
        (with-current-buffer (org-capture-get :buffer)
          (add-to-list 'org-agenda-files (buffer-file-name)))))

    (defun my/org-roam-find-project ()
      (interactive)
      ;; Add the project file to the agenda after capture is finished
      (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

      ;; Select a project file to open, creating it if necessary
      (org-roam-node-find
       nil
       nil
       (lambda (node)
         (member "Project" (org-roam-node-tags node)))))

    (defun my/org-roam-capture-inbox ()
      (interactive)
      (org-roam-capture- :node (org-roam-node-create)
                         :templates '(("i" "inbox" plain "* %?"
                                       :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))
    (defun my/org-roam-capture-task ()
      (interactive)
      ;; Capture the new task, creating the project file if necessary
      (org-roam-capture- :node (org-roam-node-read
                                nil
                                (lambda (node) (member "Project" (org-roam-node-tags node))))
                         :templates '(
                                      ("p" "project" plain "** TODO %?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                              ("Tasks")))
                                      ("s" "start now" entry "** TODO %?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                              ("Tasks"))
                                       :clock-in :clock-resume)
                                      ("m" "Meeting")
                                      ("mp" "Prepare meeting" entry "**** Notes\n %?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                              ("Meetings"))
                                       :target (file+olp+datetree "%<%Y%m%d%H%M%S>-${slug}.org" ("Meetings"))))))

    (defun my/org-roam-capture-meeting ()
      (interactive)
      (org-roam-capture- :node (org-roam-node-read
                                nil
                                (my/org-roam-filter-by-tag "Project"))
                         :templates '(("m" "Meeting" plain "** %<%Y-%m-%d %H:%M>\n%?"
                                       :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                              "#+title: ${title}\n#+category:${title}\n#+filetags: Project"
                                                              ("Meetings"))
                                       :clock-in :clock-resume
                                       :empty-lines: 1))))
#+end_src

** Deft

#+begin_src emacs-lisp
  (use-package deft
    :commands (deft)
    :config
    (setq deft-extensions '("org" "md")
          deft-directory "~/Documents/Org/roam"
          deft-recursive t))
#+end_src
