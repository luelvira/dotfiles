#+TITLE: Org Mode Workflow
#+PROPERTY: header-args:emacs-lisp :tangle ./lisp/org-workflow.el

* Table Of Content :TOC:
- [[#principles][Principles]]
  -  [[#files-path][Files Path]]
  -  [[#gtd][GTD]]
- [[#agendas][Agendas]]
  - [[#custom-comands][Custom comands]]
  - [[#control-time-per-task][Control time per task]]
- [[#capture-template][Capture template]]
- [[#end-of-file][End of file]]

* Principles

**  Files Path

First define where is the org folder
#+begin_src emacs-lisp
(setq 
   org-directory (file-truename "~/Documents/Org/"))
(setq
  org-default-notes-file (concat org-directory "Inbox.org"))
#+end_src
**  GTD

*** Multiple  keyword sets in one file
From the [[https://orgmode.org/manual/Multiple-sets-in-one-file.html][org manual]], sometimes you want to use different sets of TODO keywords in parallel. For
example a set for task that could be =DONE= or =TODO=, other task that could depends on other and
include the keyword =WAITING= and so on.

*IMPORTANT* You can only use set at time, so you need first to select the correct workflow. The
shortcut to select them is: =C-u C-u C-c C-t=;  =C-s-RIGHT=;  =C-s-LEFT=

****  Workflow states
- *TODO*: A task which should be done, but is not processed
- *NEXT*: With the GTD flow, the next task to be done
- *WAIT*: This task depends on other person, so it's not actionable
- *DONE*: Need explication?

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "|" "DONE(d!)" "CANCELED(c!)")))
#+end_src

**** Tags

Tags helps to filter over all task. This task are mutually exclusive, allowing to determinate its context.
- *batch* Low effort
- *followup* Someone is waiting on me to finish this task
#+begin_src emacs-lisp
  (setq org-tag-alist
      '((:startgroup . nil)
       ;Put mutually exclusive tags here
       ("@home" . ?H )
       ("@PHD" . ?P)
       ("@UI" . ?U)
       (:endgroup . nil)))

#+end_src

* Agendas

#+begin_src emacs-lisp
  (setq org-agenda-files (mapcar (lambda (file) (concat org-directory file)) '("Tasks.org" "Habits.org")))

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'week)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  ; custom display of task
  (setq org-columns-default-format "%20CATEGORY(Category) %30ITEM(Task) %4TODO %6Effort(Estim){:} %16SCHEDULED %6CLOCKSUM(Clock) %TAGS")

#+end_src

** Custom comands

#+begin_example emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-toco "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-max-todos nil)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(dw/org-path "Inbox.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))
#+end_example

Org agenda is a mode of emacs that allows you to view the task for the week

*Note 1* You can shcedule the todos with org-shedule command or due time with org-deadline. To move around
the date use ~Shift+arrows~

*Note 2*: We can get a repeat item ading to the deadline the period of time to
be repeat, for example a birthday that is repeat each year (see the agenda file)

** Control time per task

Emacs give you a way to capture the time you spends on each task. You only need go over the task and execute the command =org-clock-in= and when you stop or finish go again over the task and run =org-clock-out=

#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src

* Capture template

#+begin_src emacs-lisp

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tl" "Task with link" entry (file+olp+datetree ,(concat org-directory "Tasks.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("tt" "Task" entry (file+olp+datetree ,(concat org-directory "Tasks.org"))
           "* TODO %?\n  %U\n  %i"
           :empty-lines 1)
        ("j" "Journal Entries")
        ("je" "Journal" entry
          (file+olp+datetree ,(concat org-directory "Journal.org"))
          "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
          :clock-in :clock-resume
          :empty-lines 1)
        ("jt" "Task Entry" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
         :tree-type week
         :clock-in :clock-resume
         :empty-lines 1)
        ("jm" "Meeting" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "* %<%I:%M %p> - %^{Title} :meetings:\n\n%?\n\n"
         :empty-lines 1)
        ("jj" "Journal" entry
         (file+olp+datetree ,(concat org-directory "Journal.org"))
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)))

#+end_src
* End of file

With the provide command, I ensure that will be enable to import the el file
#+begin_src emacs-lisp
(provide 'org-workflow)
#+end_src
